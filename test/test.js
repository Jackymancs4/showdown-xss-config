var expect = require('expect.js'),
  filter = require('../showdown-xss-config'),
  showdown = require('showdown');

// tests to ensure resolved issues are not re-introduced
describe('Loading methods: ', function() {

  // https://github.com/VisionistInc/showdown-xss-filter/issues/4
  describe('filters html generated by showdown rendering html', function() {

    var converter;

    beforeEach(function(done) {
      converter = new showdown.Converter({
        extensions: [filter()]
      });
      done();
    });

    it("filters XSS attacks in markdown links", function(done) {
      var markdown = "[test](javascript:alert('xss'))";
      var converted = converter.makeHtml(markdown);

      expect(converted).to.eql('<p><a href>test</a></p>');
      done();
    });

    it("properly filters mixed markdown/html attack using blockquotes", function(done) {
      var markdown = '> hello <a name="n"\n> href="javascript:alert(\'xss\')">*you*</a>';
      var converted = converter.makeHtml(markdown);

      expect(converted).to.eql('<blockquote>\n  <p>hello <a href><em>you</em></a></p>\n</blockquote>');
      done();
    });
  });
});

describe('configuration', function() {

  var converter;

  beforeEach(function(done) {

    let filterConfig = {
      onTag(tag, html, options) {
        if (tag == 'input') {
          if (html.includes('type="checkbox"'))
            return html
        }
        if (tag == 'li') {
          return html
        }
      }
    }

    converter = new showdown.Converter({
      tasklists: true,
      extensions: [filter(filterConfig)]
    });

    done();
  });

  it("Whitelist GFM style tasklist", function(done) {
    var markdown = " - [ ] Test";
    var converted = converter.makeHtml(markdown);

    expect(converted).to.eql(`<ul>
<li class="task-list-item" style="list-style-type: none;"><input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"> Test</li>
</ul>`);
    done();
  });
});

describe('registration', function() {

  var converter;

  beforeEach(function(done) {

    let filterConfig = {
      onTag(tag, html, options) {
        if (tag == 'input') {
          if (html.includes('type="checkbox"'))
            return html
        }
        if (tag == 'li') {
          return html
        }
      }
    }

    showdown.extension('myext', filter());
    converter = new showdown.Converter({
      tasklists: true
    });

    done();
  });

  it("Whitelist GFM style tasklist", function(done) {
    var markdown = " - [ ] Test";
    var converted = converter.makeHtml(markdown);

    expect(converted).to.eql(`<ul>
<li class="task-list-item" style="list-style-type: none;"><input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"> Test</li>
</ul>`);
    done();
  });
});

describe('Multiple configuration', function() {

  var converter;

  beforeEach(function(done) {

    let firstFilterConfig = {
      onTag(tag, html, options) {
        if (tag == 'p') {
          return "uno"
        }
      }
    }

    let secondFilterConfig = {
      onTag(tag, html, options) {
        if (tag == 'p') {
          return "due"
        }
      }
    }

    firstConverter = new showdown.Converter({
      tasklists: true,
      extensions: [filter(firstFilterConfig)]
    });
    secondConverter = new showdown.Converter({
      tasklists: true,
      extensions: [filter(secondFilterConfig)]
    });

    done();
  });

  it("Multiple configuration with multiple converter", function(done) {
    var markdown = "test";
    var firstConverted = firstConverter.makeHtml(markdown);
    var secondConverted = secondConverter.makeHtml(markdown);

    expect(firstConverted).to.eql('unotestuno');
    expect(secondConverted).to.eql('duetestdue');

    done();
  });
});
